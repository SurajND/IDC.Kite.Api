// <auto-generated />
using System;
using IDC.Kite.DataModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IDC.Kite.DataModel.Migrations
{
    [DbContext(typeof(KiteContext))]
    [Migration("20191022072435_authentication")]
    partial class authentication
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IDC.Kite.Classes.Entity.KeyIndicator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Indicator");

                    b.HasKey("Id");

                    b.ToTable("KeyIndicators");
                });

            modelBuilder.Entity("IDC.Kite.Classes.Entity.OperationalCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("OperationalCompanyName");

                    b.HasKey("Id");

                    b.ToTable("OperationalCompanies");
                });

            modelBuilder.Entity("IDC.Kite.Classes.Entity.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PermissionType");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("IDC.Kite.Classes.Entity.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("OperationalCompanyId");

                    b.Property<string>("ProjectName");

                    b.HasKey("Id");

                    b.HasIndex("OperationalCompanyId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("IDC.Kite.Classes.Entity.ProjectKeyIndicator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("Actual");

                    b.Property<string>("Comment");

                    b.Property<Guid>("KeyIndicatorId");

                    b.Property<int>("Month");

                    b.Property<float>("Percentage");

                    b.Property<Guid>("ProjectId");

                    b.Property<Guid>("UpdatedBy");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("KeyIndicatorId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectKeyIndicators");
                });

            modelBuilder.Entity("IDC.Kite.Classes.Entity.ProjectKeyIndicatorYear", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<Guid>("KeyIndicatorId");

                    b.Property<Guid>("ProjectId");

                    b.Property<Guid>("UpdatedBy");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<float>("Value");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("KeyIndicatorId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectKeyIndicatorYears");
                });

            modelBuilder.Entity("IDC.Kite.Classes.Entity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RoleType");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("IDC.Kite.Classes.Entity.RolePermission", b =>
                {
                    b.Property<Guid>("PermissionId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("PermissionId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermission");
                });

            modelBuilder.Entity("IDC.Kite.Classes.Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Email");

                    b.Property<string>("FName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LName");

                    b.Property<DateTime>("LastLogin");

                    b.Property<Guid?>("OperationalCompanyId");

                    b.Property<string>("Password");

                    b.Property<int>("PhoneNumber");

                    b.Property<Guid?>("ProjectId");

                    b.Property<Guid>("RoleId");

                    b.Property<string>("Token");

                    b.HasKey("Id");

                    b.HasIndex("OperationalCompanyId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("IDC.Kite.Classes.Entity.Project", b =>
                {
                    b.HasOne("IDC.Kite.Classes.Entity.OperationalCompany", "OperationalCompany")
                        .WithMany()
                        .HasForeignKey("OperationalCompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IDC.Kite.Classes.Entity.ProjectKeyIndicator", b =>
                {
                    b.HasOne("IDC.Kite.Classes.Entity.KeyIndicator", "KeyIndicator")
                        .WithMany()
                        .HasForeignKey("KeyIndicatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IDC.Kite.Classes.Entity.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IDC.Kite.Classes.Entity.ProjectKeyIndicatorYear", b =>
                {
                    b.HasOne("IDC.Kite.Classes.Entity.KeyIndicator", "KeyIndicator")
                        .WithMany()
                        .HasForeignKey("KeyIndicatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IDC.Kite.Classes.Entity.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IDC.Kite.Classes.Entity.RolePermission", b =>
                {
                    b.HasOne("IDC.Kite.Classes.Entity.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IDC.Kite.Classes.Entity.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IDC.Kite.Classes.Entity.User", b =>
                {
                    b.HasOne("IDC.Kite.Classes.Entity.OperationalCompany", "OperationalCompany")
                        .WithMany()
                        .HasForeignKey("OperationalCompanyId");

                    b.HasOne("IDC.Kite.Classes.Entity.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("IDC.Kite.Classes.Entity.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
